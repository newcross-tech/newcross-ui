name: Design System pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  FONTAWESOME_NPM_TOKEN: ${{ secrets.FONTAWESOME_NPM_TOKEN }}
  PUBLISH_PACKAGES_PAT: ${{ secrets.GH_PACKAGES_SHARED_PAT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - name: Lint, Format, Test & Build
        run: |
          yarn install
          yarn format:check
          yarn lint:check
          yarn build
          yarn test
          yarn build-storybook
      - uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            storybook-static/**
            packages/**/build/**

  deploy_acceptance:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      - name: Deploy to acceptance
        run: |
          npm i -g serverless@3.7.1 serverless-s3-sync@3.0.0
          serverless config credentials --provider aws --key ${{ env.AWS_ACCESS_KEY_ID }} --secret ${{ env.AWS_SECRET_ACCESS_KEY }}
          serverless deploy -s acceptance

  deploy_production:
    needs: deploy_acceptance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ env.PUBLISH_PACKAGES_PAT }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      - name: Setup git push permissions
        run: |
          git config --global user.name 'NewcrossGitHubSA'
          git config --global user.email 'github-actions@newcrosshealthcare.com'
      - name: Deploy to production
        run: |
          npm i -g serverless@3.7.1 serverless-s3-sync@3.0.0 lerna@4.0.0 husky@7.0.0

          export PREVIOUS_RELEASE_TAG=$(git describe --abbrev=0 --tags)
          echo $PREVIOUS_RELEASE_TAG
          echo "PREVIOUS_RELEASE_TAG=$PREVIOUS_RELEASE_TAG" >> $GITHUB_ENV

          lerna publish --yes

          export LATEST_RELEASE_TAG=$(git describe --abbrev=0 --tags)
          echo $LATEST_RELEASE_TAG
          echo "LATEST_RELEASE_TAG=$LATEST_RELEASE_TAG" >> $GITHUB_ENV

          serverless config credentials --provider aws --key ${{ env.AWS_ACCESS_KEY_ID }} --secret ${{ env.AWS_SECRET_ACCESS_KEY }}
          serverless deploy -s production
      - id: create-release-notes
        name: Create Release Notes
        uses: newcross-tech/release-notes-action@v1
        with:
          service-name: ${{ github.event.repository.name }}
          source-tag: ${{ env.PREVIOUS_RELEASE_TAG }}
          target-tag: ${{ env.LATEST_RELEASE_TAG }}
          git-pat: ${{ secrets.GH_REPO_SHARED_PAT }}
          jira-user: ${{ vars.RELEASE_NOTES_JIRA_USER }}
          jira-pat: ${{ secrets.RELEASE_NOTES_JIRA_PAT }}
      - name: Send slack notification
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            COMMIT=$(git rev-list -n 1 ${{ env.PREVIOUS_RELEASE_TAG }})
            TAGS=$(git tag --contains $COMMIT | jq -R -s -c 'split("\n")[:-1]')

            echo $TAGS | jq -R -s -c 'split(",")[:-1]' | jq -n \
              --arg text "New versions of the Design System have been released" \
              --argjson tags "$TAGS" \
              '{
                "text": $text,
                "attachments": [
                  {
                    "color": "dbab09",
                    "fields": ($tags | map({ "short": true, "value": . }))
                  }
                ]
              }'
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
